<%= include_i18n_calendar_javascript %>
<%= stylesheet_link_tag 'jquery-ui.css' %>
<%= javascript_include_tag 'model_box_popup' %>
<%= javascript_include_tag 'jquery.ajaxAutocomplete.ch' %>
<script>
  var q = jQuery.noConflict();
  var month_names = "<%= I18n.t('date.month_names').compact.join(',') %>".split(',');
  var month_names_short = "<%= I18n.t('date.abbr_month_names').compact.join(',') %>".split(',');
  q.datepicker.regional["<%= I18n.locale.to_s %>"] = {
    monthNames: month_names,
    monthNamesShort: month_names_short
  }
  q.datepicker._gotoToday = function(id) {
    var target = $(id);
    var inst = this._getInst(target[0]);
    if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
      inst.selectedDay = inst.currentDay;
      inst.drawMonth = inst.selectedMonth = inst.currentMonth;
      inst.drawYear = inst.selectedYear = inst.currentYear;
    }
    else {
      var date = inst.settings.localToday || new Date(); // CHANGED. use new option, or use new Date
      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
      this._setDateDatepicker(target, date);
      this._selectDate(id, this._getDateDatepicker(target));
    }
    this._notifyChange(inst);
    this._adjustDate(target);
  }

  q.datepicker._generateHTML = function(inst) {
    var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
    controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
    monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
    selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
    cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
    printDate, dRow, tbody, daySettings, otherMonth, unselectable,
    tempDate = inst.settings.localToday || new Date(), // CHANGED. use new option, or use new Date
    today = this._daylightSavingAdjust(
    new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
    isRTL = this._get(inst, "isRTL"),
    showButtonPanel = this._get(inst, "showButtonPanel"),
    hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
    navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
    numMonths = this._getNumberOfMonths(inst),
    showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
    stepMonths = this._get(inst, "stepMonths"),
    isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
    currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
      new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
    minDate = this._getMinMaxDate(inst, "min"),
    maxDate = this._getMinMaxDate(inst, "max"),
    drawMonth = inst.drawMonth - showCurrentAtPos,
    drawYear = inst.drawYear;

    if (drawMonth < 0) {
      drawMonth += 12;
      drawYear--;
    }
    if (maxDate) {
      maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
      maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
      maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
      while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
        drawMonth--;
        if (drawMonth < 0) {
          drawMonth = 11;
          drawYear--;
        }
      }
    }
    inst.drawMonth = drawMonth;
    inst.drawYear = drawYear;

    prevText = this._get(inst, "prevText");
    prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
    this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
    this._getFormatConfig(inst)));

    prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
      "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
      " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
      (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

    nextText = this._get(inst, "nextText");
    nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
    this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
    this._getFormatConfig(inst)));

    next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
      "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
      " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
      (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

    currentText = this._get(inst, "currentText");
    gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
    currentText = (!navigationAsDateFormat ? currentText :
      this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

    controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
      this._get(inst, "closeText") + "</button>" : "");

    buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
      (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
      ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

    firstDay = parseInt(this._get(inst, "firstDay"),10);
    firstDay = (isNaN(firstDay) ? 0 : firstDay);

    showWeek = this._get(inst, "showWeek");
    dayNames = this._get(inst, "dayNames");
    dayNamesMin = this._get(inst, "dayNamesMin");
    monthNames = this._get(inst, "monthNames");
    monthNamesShort = this._get(inst, "monthNamesShort");
    beforeShowDay = this._get(inst, "beforeShowDay");
    showOtherMonths = this._get(inst, "showOtherMonths");
    selectOtherMonths = this._get(inst, "selectOtherMonths");
    defaultDate = this._getDefaultDate(inst);
    html = "";
    dow;
    for (row = 0; row < numMonths[0]; row++) {
      group = "";
      this.maxRows = 4;
      for (col = 0; col < numMonths[1]; col++) {
        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
        cornerClass = " ui-corner-all";
        calender = "";
        if (isMultiMonth) {
          calender += "<div class='ui-datepicker-group";
          if (numMonths[1] > 1) {
            switch (col) {
              case 0: calender += " ui-datepicker-group-first";
                cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
              case numMonths[1]-1: calender += " ui-datepicker-group-last";
                cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
              default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
            }
          }
          calender += "'>";
        }
        calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
          (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
          (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
          this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
        row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
        "</div><table class='ui-datepicker-calendar'><thead>" +
          "<tr>";
        thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
        for (dow = 0; dow < 7; dow++) { // days of the week
          day = (dow + firstDay) % 7;
          thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
            "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
        }
        calender += thead + "</tr></thead><tbody>";
        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
          inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
        }
        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
        numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
        this.maxRows = numRows;
        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
        for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
          calender += "<tr>";
          tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
            this._get(inst, "calculateWeek")(printDate) + "</td>");
          for (dow = 0; dow < 7; dow++) { // create date picker days
            daySettings = (beforeShowDay ?
              beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
            otherMonth = (printDate.getMonth() !== drawMonth);
            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
              (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
            tbody += "<td class='" +
              ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
            (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
            ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
            (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
              // or defaultDate is current printedDate and defaultDate is selectedDate
            " " + this._dayOverClass : "") + // highlight selected day
            (unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
            (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
            (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
            (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
            ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
            (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
            (otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
            (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
              (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
              (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
            (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
            "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
            printDate.setDate(printDate.getDate() + 1);
            printDate = this._daylightSavingAdjust(printDate);
          }
          calender += tbody + "</tr>";
        }
        drawMonth++;
        if (drawMonth > 11) {
          drawMonth = 0;
          drawYear++;
        }
        calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
          ((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
        group += calender;
      }
      html += group;
    }
    html += buttonPanel;
    inst._keyEvent = false;
    return html;
  }

  q(function() {
    q( ".column" ).sortable({
      placeholder: "holder",
      connectWith: ".column",
      update: function( event, ui ) {
        if (this === ui.item.parent()[0]) {
          column_number = ui.item.parent().attr("id").replace("col-","");
          position = ui.item.prevAll('.portlet').length + 1;
          palette_id = ui.item.attr("id").replace("-palette","");
          q.ajax({
            type: 'POST' ,
            url: "data_palettes/sort_palettes",
            data : {
              palette : {
                id : palette_id,
                column_number : column_number,
                position : position
              }
            }
          })
        }
      }
    });
    q( ".column" ).sortable( "option", "handle", ".portlet-header" );
    q( ".portlet" ).addClass( "ui-widget ui-widget-content ui-helper-clearfix ui-corner-all" )
    .find( ".portlet-header" )
    .addClass( "ui-widget-header ui-corner-all" )
    .prepend('<span class="remove-icon"></span>')
    .end()
    .find( ".portlet-content" );
    q( ".portlet-header .ui-icon,.portlet-header .name-span" ).click(function() {
      q( this ).parent().find(".ui-icon").toggleClass( "ui-icon-minusthick" ).toggleClass( "ui-icon-plusthick" );
      q( this ).parents( ".portlet:first" ).find( ".portlet-content" ).slideToggle();
      palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
      q.ajax({
        type: 'POST' ,
        url: "data_palettes/toggle_minimize",
        data : {
          palette : {
            id : palette_id
          }
        }
      })
    });

    q( ".column" ).disableSelection();
    q(".portlet-header .remove-icon").click(function() {
      q(this).parents(".portlet:first").remove();
      palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
      q.ajax({
        type: 'POST' ,
        url: "data_palettes/remove_palette",
        data : {
          palette : {
            id : palette_id
          }
        }
      })
    });
    q(".portlet-header .refresh-icon").click(function() {
      palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
      palette_name = q(this).parents(".portlet:first").find( ".portlet-content" ).attr('id').replace("-palette-content","")
      var minimized = 1
      if(q(this).parent().find(".ui-icon-plusthick").length==0){
        minimized = 0
      }
      q.ajax({
        type: 'POST' ,
        url: "data_palettes/refresh_palette",
        data : {
          palette : {
            id : palette_id
          }
        },
        beforeSend : function() {
          q("#"+palette_name+"-palette-content").slideUp();
          q("#"+palette_name+"-refresh").css("background","none");
          q("#"+palette_name+"-refresh").prepend('<img class="palette-loader" border="0" align="absmiddle" src="/images/Loader-transparant.gif">')
          q("#"+palette_name+"-refresh").css("width","20px");
        },
        success : function(data) {
          if(data === "window.location = '/'")
          {
            q("#"+palette_name+"-palette-content").html('Login to continue');
            
          }
          else
          {
            q("#"+palette_name+"-palette-content").html(data);
          }
          q( ".datepicker" ).datepicker({
            showOn: "button",
            buttonImage: "/images/transparent.png",
            buttonImageOnly: true,
            changeMonth: true,
            changeYear: true,
            showOtherMonths: true,
            selectOtherMonths: true,
            buttonText: 'Select Date',
            dateFormat: "yy-mm-dd",
            localToday: q.datepicker.parseDate("yy-mm-dd",q("#tzone_date").val())
          });
          q("#"+palette_name+"-refresh").find('img').remove();
          q("#"+palette_name+"-refresh").removeAttr('style');
          if(minimized == 0){
            q("#"+palette_name+"-palette-content").slideDown();
          }
          q("#"+palette_name+"-palette-content").find(".linked-palette").hover(
          function () {
            q(this).find(".themed_text").each(function(){
              q(this).html("<u>"+q(this).html()+"</u>");
            });
            q(this).find(".header-left").each(function(){
              q(this).html("<u>"+q(this).html()+"</u>");
            });
          },
          function () {
            q(this).find(".themed_text").each(function(){
              q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
            });
            q(this).find(".header-left").each(function(){
              q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
            });
          }
        );
        }
      })
    });
  });
  q(document).ready(function () {
    q(".portlet-header .refresh-icon").each(function() {
      var palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
      var palette_name = q(this).parents(".portlet:first").find( ".portlet-content" ).attr('id').replace("-palette-content","")
      var minimized = 1
      if(q(this).parent().find(".ui-icon-plusthick").length==0){
        minimized = 0
      }
      q.ajax({
        type: 'POST' ,
        url: "data_palettes/refresh_palette",
        data : {
          palette : {
            id : palette_id
          }
        },
        beforeSend : function() {
          q("#"+palette_name+"-palette-content").slideUp();
          q("#"+palette_name+"-refresh").css("background","none");
          q("#"+palette_name+"-refresh").prepend('<img class="palette-loader" border="0" align="absmiddle" src="/images/Loader-transparant.gif">')
          q("#"+palette_name+"-refresh").css("width","20px");
        },
        success : function(data) {
          if(data === "window.location = '/'")
          {
            q("#"+palette_name+"-palette-content").html('Login to continue');
            
          }
          else
          {
            q("#"+palette_name+"-palette-content").html(data);
          }
          q( ".datepicker" ).datepicker({
            showOn: "button",
            buttonImage: "/images/transparent.png",
            buttonImageOnly: true,
            changeMonth: true,
            changeYear: true,
            showOtherMonths: true,
            selectOtherMonths: true,
            buttonText: 'Select Date',
            dateFormat: "yy-mm-dd",
            localToday: q.datepicker.parseDate("yy-mm-dd",q("#tzone_date").val())
          });
          q("#"+palette_name+"-refresh").find('img').remove();
          q("#"+palette_name+"-refresh").removeAttr('style');
          if(minimized == 0){
            q("#"+palette_name+"-palette-content").slideDown();
          }
          q("#"+palette_name+"-palette-content").find(".linked-palette").hover(
          function () {
            q(this).find(".themed_text").each(function(){
              q(this).html("<u>"+q(this).html()+"</u>");
            });
            q(this).find(".header-left").each(function(){
              q(this).html("<u>"+q(this).html()+"</u>");
            });
          },
          function () {
            q(this).find(".themed_text").each(function(){
              q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
            });
            q(this).find(".header-left").each(function(){
              q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
            });
          }
        );
        }
      })
    });
    q.datepicker.setDefaults(q.datepicker.regional["<%= I18n.locale.to_s %>"]);
  });

  q(function() {
    q( ".datepicker" ).datepicker({
      showOn: "button",
      buttonImage: "/images/transparent.png",
      buttonImageOnly: true,
      changeMonth: true,
      changeYear: true,
      showOtherMonths: true,
      selectOtherMonths: true,
      buttonText: 'Select Date',
      dateFormat: "yy-mm-dd",
      localToday: q.datepicker.parseDate("yy-mm-dd",q("#tzone_date").val())
    });
  });

  function set_date(th_is)
  {
    curr_date = th_is.value;
    format = "<%= date_format %>";
    switch(format){
      case '2':
        format_str = 'MM dd, yy';
        break;
      case '3':
        format_str = 'yy MM dd';
        break;
      default:
        format_str = 'dd MM yy';
        break;
    }
    disp_date = q.datepicker.formatDate(format_str, (q.datepicker.parseDate("yy-mm-dd",curr_date)));
    palette_name = th_is.id.replace("-date","");
    today=q("#tzone_date").val();
    if(curr_date==today)
    {
      disp_date = disp_date+" "+q("#today").val();
    }
    q("#"+palette_name).html(disp_date);
    q.ajax({
      type: 'POST' ,
      url: "data_palettes/update_palette",
      data : {
        palette : {
          cur_date : curr_date ,
          palette_name : palette_name
        }
      },
      beforeSend : function() {
        q("#"+palette_name+"-loader").show();
        q("#"+palette_name+"-subcontent").slideUp();
      },
      success : function(data) {
        q("#"+palette_name+"-subcontent").html(data);
        q("#"+palette_name+"-loader").hide();
        q("#"+palette_name+"-subcontent").slideDown();
        q("#"+palette_name+"-subcontent").find(".linked-palette").hover(
        function () {
          q(this).find(".themed_text").each(function(){
            q(this).html("<u>"+q(this).html()+"</u>");
          });
          q(this).find(".header-left").each(function(){
            q(this).html("<u>"+q(this).html()+"</u>");
          });
        },
        function () {
          q(this).find(".themed_text").each(function(){
            q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
          });
          q(this).find(".header-left").each(function(){
            q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
          });
        }
      );
      }

    });
  }

  function show_more_results(th_is)
  {
    palette_name = th_is.id.replace("-view-more","");
    offset_field = q("#"+palette_name+"-count")
    offset = offset_field.html();
    cur_date = q("#"+palette_name+"-date").val();
    q.ajax({
      type: 'POST' ,
      url: "data_palettes/view_more",
      data : {
        palette : {
          palette_name : palette_name,
          offset : offset,
          cur_date : cur_date
        }
      },
      beforeSend : function() {
        q("#"+palette_name+"-more-loader").show();
      },
      success : function(data) {
        q("#"+palette_name+"-more-div").remove();
        q("#"+palette_name+"-subcontent").append(data);
        offset_field = q("#"+palette_name+"-count")
        offset_field.html(parseInt(offset) + 3);
        q("#"+palette_name+"-subcontent").find(".linked-palette").hover(
        function () {
          q(this).find(".themed_text").each(function(){
            q(this).html("<u>"+q(this).html()+"</u>");
          });
          q(this).find(".header-left").each(function(){
            q(this).html("<u>"+q(this).html()+"</u>");
          });
        },
        function () {
          q(this).find(".themed_text").each(function(){
            q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
          });
          q(this).find(".header-left").each(function(){
            q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
          });
        }
      );
        q("#"+palette_name+"-more-loader").hide();

      }

    });
  }

  function get_prev_date(th_is)
  {
    palette_name = th_is.id.replace("-prev","");
    date_field = q("#"+palette_name+"-date");
    curr_date = q.datepicker.parseDate("yy-mm-dd", date_field.val());
    prev_date = curr_date.setDate(curr_date.getDate()-1);
    date_field.val(q.datepicker.formatDate('yy-mm-dd', new Date(prev_date)));
    set_date(date_field.get(0));
  }

  function get_next_date(th_is)
  {
    palette_name = th_is.id.replace("-next","");
    date_field = q("#"+palette_name+"-date");
    curr_date = q.datepicker.parseDate("yy-mm-dd", date_field.val());
    next_date = curr_date.setDate(curr_date.getDate()+1);
    date_field.val(q.datepicker.formatDate('yy-mm-dd', new Date(next_date)));
    set_date(date_field.get(0));
  }

  function show_list()
  {
    q.ajax({
      type: 'POST' ,
      url: "data_palettes/show_palette_list",
      data : {
        palette : {
        }
      },
      beforeSend : function() {
        q("#add-loader").show();
      },
      success : function(data) {
        q("#palette-list").html(data);
        q("#add-loader").hide();
        q("#add-buttons-div").hide();
        q("#palette-list").slideDown();

      }

    });
  }

  function hide_list()
  {
    q("#palette-list").slideUp();
    q("#add-buttons-div").show();
  }

  function submit_palette(){
    querystring = q('#palette-form').serialize();
    q.ajax({
      type: 'POST' ,
      url: "data_palettes/modify_user_palettes",
      data : querystring,
      beforeSend : function() {
        q("#list-loader").show();
        q("#palettes-main").slideUp();
      },
      success : function(data) {
        q("#palettes-main").html(data);
        q( ".column" ).sortable({
          placeholder: "holder",
          connectWith: ".column",
          update: function( event, ui ) {
            if (this === ui.item.parent()[0]) {
              column_number = ui.item.parent().attr("id").replace("col-","");
              position = ui.item.prevAll('.portlet').length + 1;
              palette_id = ui.item.attr("id").replace("-palette","");
              q.ajax({
                type: 'POST' ,
                url: "data_palettes/sort_palettes",
                data : {
                  palette : {
                    id : palette_id,
                    column_number : column_number,
                    position : position
                  }
                }
              })
            }
          }
        });
        q( ".column" ).sortable( "option", "handle", ".portlet-header" );
        q( ".portlet" ).addClass( "ui-widget ui-widget-content ui-helper-clearfix ui-corner-all" )
        .find( ".portlet-header" )
        .addClass( "ui-widget-header ui-corner-all" )
        .prepend('<span class="remove-icon"></span>')
        .end()
        .find( ".portlet-content" );
        q( ".portlet-header .ui-icon,.portlet-header .name-span" ).click(function() {
          q( this ).parent().find(".ui-icon").toggleClass( "ui-icon-minusthick" ).toggleClass( "ui-icon-plusthick" );
          q( this ).parents( ".portlet:first" ).find( ".portlet-content" ).slideToggle();
          palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
          q.ajax({
            type: 'POST' ,
            url: "data_palettes/toggle_minimize",
            data : {
              palette : {
                id : palette_id
              }
            }
          })
        });
        q( ".column" ).disableSelection();
        q(".portlet-header .remove-icon").click(function() {
          q(this).parents(".portlet:first").remove();
          palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
          q.ajax({
            type: 'POST' ,
            url: "data_palettes/remove_palette",
            data : {
              palette : {
                id : palette_id
              }
            }
          })
        });
        q(".portlet-header .refresh-icon").click(function() {
          palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
          palette_name = q(this).parents(".portlet:first").find( ".portlet-content" ).attr('id').replace("-palette-content","")
          var minimized = 1
          if(q(this).parent().find(".ui-icon-plusthick").length==0){
            minimized = 0
          }
          q.ajax({
            type: 'POST' ,
            url: "data_palettes/refresh_palette",
            data : {
              palette : {
                id : palette_id
              }
            },
            beforeSend : function() {
              q("#"+palette_name+"-palette-content").slideUp();
              q("#"+palette_name+"-refresh").css("background","none");
              q("#"+palette_name+"-refresh").prepend('<img class="palette-loader" border="0" align="absmiddle" src="/images/Loader-transparant.gif">')
              q("#"+palette_name+"-refresh").css("width","20px");
            },
            success : function(data) {
            if(data === "window.location = '/'")
            {
              q("#"+palette_name+"-palette-content").html('Login to continue');
            }
            else
            {
              q("#"+palette_name+"-palette-content").html(data);
            }
              q( ".datepicker" ).datepicker({
                showOn: "button",
                buttonImage: "/images/transparent.png",
                buttonImageOnly: true,
                changeMonth: true,
                changeYear: true,
                showOtherMonths: true,
                selectOtherMonths: true,
                buttonText: 'Select Date',
                dateFormat: "yy-mm-dd",
                localToday: q.datepicker.parseDate("yy-mm-dd",q("#tzone_date").val())
              });
              q("#"+palette_name+"-refresh").find('img').remove();
              q("#"+palette_name+"-refresh").removeAttr('style');
              if(minimized == 0){
                q("#"+palette_name+"-palette-content").slideDown();
              }
              q(".linked-palette").hover(
              function () {
                q(this).find(".themed_text").each(function(){
                  q(this).html("<u>"+q(this).html()+"</u>");
                });
                q(this).find(".header-left").each(function(){
                  q(this).html("<u>"+q(this).html()+"</u>");
                });
              },
              function () {
                q(this).find(".themed_text").each(function(){
                  q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
                });
                q(this).find(".header-left").each(function(){
                  q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
                });
              }
            );
            }
          })
        });
        q(".portlet-header .refresh-icon").each(function() {
          var palette_id = q(this).parents(".portlet:first").attr('id').replace("-palette","");
          var palette_name = q(this).parents(".portlet:first").find( ".portlet-content" ).attr('id').replace("-palette-content","")
          var minimized = 1
          if(q(this).parent().find(".ui-icon-plusthick").length==0){
            minimized = 0
          }
          q.ajax({
            type: 'POST' ,
            url: "data_palettes/refresh_palette",
            data : {
              palette : {
                id : palette_id
              }
            },
            beforeSend : function() {
              q("#"+palette_name+"-palette-content").slideUp();
              q("#"+palette_name+"-refresh").css("background","none");
              q("#"+palette_name+"-refresh").prepend('<img class="palette-loader" border="0" align="absmiddle" src="/images/Loader-transparant.gif">')
              q("#"+palette_name+"-refresh").css("width","20px");
            },
            success : function(data) {
            if(data === "window.location = '/'")
            {
              q("#"+palette_name+"-palette-content").html('Login to continue');
            }
            else
            {
              q("#"+palette_name+"-palette-content").html(data);
            }
              q( ".datepicker" ).datepicker({
                showOn: "button",
                buttonImage: "/images/transparent.png",
                buttonImageOnly: true,
                changeMonth: true,
                changeYear: true,
                showOtherMonths: true,
                selectOtherMonths: true,
                buttonText: 'Select Date',
                dateFormat: "yy-mm-dd",
                localToday: q.datepicker.parseDate("yy-mm-dd",q("#tzone_date").val())
              });
              q("#"+palette_name+"-refresh").find('img').remove();
              q("#"+palette_name+"-refresh").removeAttr('style');
              if(minimized == 0){
                q("#"+palette_name+"-palette-content").slideDown();
              }
              q("#"+palette_name+"-palette-content").find(".linked-palette").hover(
              function () {
                q(this).find(".themed_text").each(function(){
                  q(this).html("<u>"+q(this).html()+"</u>");
                });
                q(this).find(".header-left").each(function(){
                  q(this).html("<u>"+q(this).html()+"</u>");
                });
              },
              function () {
                q(this).find(".themed_text").each(function(){
                  q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
                });
                q(this).find(".header-left").each(function(){
                  q(this).html(q(this).html().replace("</u>","").replace("<u>",""));
                });
              }
            );
            }
          })
        });
        q( ".datepicker" ).datepicker({
          showOn: "button",
          buttonImage: "/images/transparent.png",
          buttonImageOnly: true,
          changeMonth: true,
          changeYear: true,
          showOtherMonths: true,
          selectOtherMonths: true,
          buttonText: 'Select Date',
          dateFormat: "yy-mm-dd",
          localToday: q.datepicker.parseDate("yy-mm-dd",q("#tzone_date").val())
        });
        q("#list-loader").hide();
        q("#palettes-main").slideDown();
        q("#palette-list").slideUp();
        q("#add-buttons-div").show();
      }
    });
  }



</script>

<% unless flash[:notice].nil? %>
  <p class="flash-msg"> <%= flash[:notice] %> </p>
<% end %>

<% if @user.student? %>
<div class="button-box">
  <%= link_to "<div class ='button-label'><p>#{t('my_profile')}</p></div>", {:controller => "student", :action => "profile", :id => @student.id},
              :class => "option_buttons", :id => "student_details_button", :title => "        #{t('view_your_profile')}"  %>

</div>
<div class="button-box">
  <%= link_to "<div class ='button-label'><p>#{t('campus_news')}</p></div>", {:controller => "news", :action => "index"},
              :class => "option_buttons", :id => "campus_news_button",:title => t('news_link_title_view')%>

</div>
<div class="button-box">
  <%= link_to "<div class ='button-label'><p>#{t('timetable_text')}</p></div>", {:controller => "timetable", :action => "student_view",:id=>@student.id},
              :class => "option_buttons", :id => "timetable_button",:title => t('timetable_link_title') %>
</div>
<div class="button-box">
  <%= link_to "<div class ='button-label'><p>#{t('academics')}</p></div>", {:controller => "student", :action => "reports",:id => @student.id},
              :class => "option_buttons", :id => "academic_button",:title => "         #{t('academic_reports')}   "  %>
</div>
<% elsif @user.parent? %>
<div id="user_options">
  <div class="button-box">
    <%= link_to "<div class ='button-label'><p>#{t('my_profile')}</p></div>", {:controller => "student", :action => "profile", :id => @student.id},
                :class => "option_buttons", :id => "student_details_button", :title => "#{t('view_your_profile')}"  %>

  </div>
  <div class="button-box">
    <%= link_to "<div class ='button-label'><p>#{t('campus_news')}</p></div>", {:controller => "news", :action => "index"},
                :class => "option_buttons", :id => "campus_news_button",:title => t('news_link_title_view')%>

  </div>
  <div class="button-box">
    <%= link_to "<div class ='button-label'><p>#{t('timetable_text')}</p></div>", {:controller => "timetable", :action => "student_view",:id=>@student.id},
                :class => "option_buttons", :id => "timetable_button",:title => t('timetable_link_title') %>
  </div>
  <div class="button-box">
    <%= link_to "<div class ='button-label'><p>#{t('academics')}</p></div>", {:controller => "student", :action => "reports",:id => @student.id},
                :class => "option_buttons", :id => "academic_button",:title => "         #{t('academic_reports')}   "  %>
  </div>
</div>

<% end %>
<div id="add-palette-main">
  <div id="palette-list" style="display:none;">
  </div>
  <div id="add-buttons-div">
    <%= link_to t('data_palettes.manage_dashlets'), "#", {:id=>"add-palette-button", :class=>"grey-button-large themed_hover_text", :onClick=>"show_list(); return false;"} %>
    <%= image_tag("Loader-transparant.gif",:align => "absmiddle",:border => 0,:id => "add-loader", :class=>"add-palette-loader", :style =>"display: none;" ) %>
  </div>
</div>
<%= hidden_field_tag "today_text", t('today_text'), :id=>"today", :autocomplete=>:off %>
<%= hidden_field_tag "tzone_date", @today, :id=>"tzone_date", :autocomplete=>:off %>
<div id="palettes-main">
  <%= render :partial=>"palettes_main", :locals=>{:user_palettes=>@user_palettes, :cur_date=>@cur_date} %>
</div>

